#!/bin/bash
# SaltGoat 内存监控脚本
# /usr/local/bin/saltgoat-memory-monitor

LOG_FILE="/var/log/saltgoat-memory.log"
THRESHOLD_75=75
THRESHOLD_85=85

# 创建日志目录
mkdir -p "$(dirname "$LOG_FILE")"

# 获取内存使用率
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# 记录内存使用情况
echo "[$TIMESTAMP] 内存使用率: ${MEMORY_USAGE}%" >> "$LOG_FILE"

# 检查内存使用率
if [[ $MEMORY_USAGE -ge $THRESHOLD_85 ]]; then
    echo "[$TIMESTAMP] 警告: 内存使用率达到 ${MEMORY_USAGE}%，超过 85% 阈值" >> "$LOG_FILE"
    echo "[$TIMESTAMP] 执行内存清理..." >> "$LOG_FILE"
    
    # 清理缓存
    sync
    echo 3 > /proc/sys/vm/drop_caches
    
    # 重启相关服务
    systemctl restart php8.3-fpm
    systemctl restart nginx
    
    echo "[$TIMESTAMP] 内存清理完成" >> "$LOG_FILE"
    
elif [[ $MEMORY_USAGE -ge $THRESHOLD_75 ]]; then
    echo "[$TIMESTAMP] 注意: 内存使用率达到 ${MEMORY_USAGE}%，超过 75% 阈值" >> "$LOG_FILE"
    echo "[$TIMESTAMP] 执行轻度内存清理..." >> "$LOG_FILE"
    
    # 轻度清理
    sync
    echo 1 > /proc/sys/vm/drop_caches
    
    echo "[$TIMESTAMP] 轻度内存清理完成" >> "$LOG_FILE"
fi

# 保持日志文件大小合理
if [[ -f "$LOG_FILE" ]] && [[ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null) -gt 1048576 ]]; then
    tail -n 1000 "$LOG_FILE" > "${LOG_FILE}.tmp" && mv "${LOG_FILE}.tmp" "$LOG_FILE"
fi
