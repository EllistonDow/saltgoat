# SaltGoat CI/CD 工作流
# .github/workflows/code-review.yml

name: SaltGoat Code Review

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prepare Pillar defaults
      run: |
        sudo mkdir -p salt/pillar
        cat <<'EOF' | sudo tee salt/pillar/saltgoat.sls >/dev/null
mysql_password: 'CI-MySQL123!'
valkey_password: 'CI-Valkey123!'
rabbitmq_password: 'CI-Rabbit123!'
webmin_password: 'CI-Webmin123!'
phpmyadmin_password: 'CI-PhpMyAdmin123!'
ssl_email: 'ci@example.com'
timezone: 'UTC'
language: 'en_US.UTF-8'
smtp_host: ''
smtp_user: ''
smtp_password: ''
smtp_from_email: ''
smtp_from_name: 'SaltGoat CI'
EOF
        sudo chmod 600 salt/pillar/saltgoat.sls
        sudo chown root:root salt/pillar/saltgoat.sls

    - name: Setup Salt
      run: |
        curl -L https://bootstrap.saltproject.io | sudo sh
        sudo salt-call --local test.ping
        
    - name: Install code review tools
      run: |
        sudo apt update
        sudo apt install -y shellcheck shfmt python3-yaml
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        
    - name: Run SaltGoat code review
      run: |
        ./scripts/salt-code-review.sh -a -c -v

    - name: Magento optimization dry-run (test mode)
      run: |
        bash tests/test_magento_optimization.sh

    - name: Check Salt state files
      run: |
        find salt/ -name "*.sls" -not -path "*/pillar/*" -print0 | while IFS= read -r -d '' file; do
          sls="${file#salt/}"
          sls="${sls%.sls}"
          sls="${sls//\//.}"
          echo "Validating $sls"
          salt-call --local state.show_sls "$sls" --out=json >/dev/null
        done
        
    - name: Test main script
      run: |
        ./saltgoat help
        ./saltgoat versions
        ./saltgoat status

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        set -eo pipefail
        # 检查硬编码密码
        if grep -R --line-number --no-color "password\s*=" --include="*.sh" --include="*.sls" . | grep -v "MYSQL_PASSWORD\|VALKEY_PASSWORD" ; then
          echo "发现可能的硬编码密码"
          exit 1
        fi

        # 检查脚本权限
        if find . -name "*.sh" -not -perm 755 -print -quit | grep -q .; then
          echo "存在权限不是 755 的脚本文件"
          find . -name "*.sh" -not -perm 755 -print
          exit 1
        fi

        # 检查敏感文件
        if find . \( -name "*.key" -o -name "*.pem" -o -name "*.p12" \) -print -quit | grep -q .; then
          echo "发现敏感证书文件"
          exit 1
        fi

  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prepare Pillar defaults
      run: |
        sudo mkdir -p salt/pillar
        cat <<'EOF' | sudo tee salt/pillar/saltgoat.sls >/dev/null
mysql_password: 'CI-MySQL123!'
valkey_password: 'CI-Valkey123!'
rabbitmq_password: 'CI-Rabbit123!'
webmin_password: 'CI-Webmin123!'
phpmyadmin_password: 'CI-PhpMyAdmin123!'
ssl_email: 'ci@example.com'
timezone: 'UTC'
language: 'en_US.UTF-8'
smtp_host: ''
smtp_user: ''
smtp_password: ''
smtp_from_email: ''
smtp_from_name: 'SaltGoat CI'
EOF
        sudo chmod 600 salt/pillar/saltgoat.sls
        sudo chown root:root salt/pillar/saltgoat.sls

    - name: Setup test environment
      run: |
        sudo apt update
        sudo apt install -y nginx mysql-server php-fpm
        
    - name: Install SaltGoat
      run: |
        sudo ./saltgoat system install
        
    - name: Test basic functionality
      run: |
        saltgoat versions
        saltgoat status
        saltgoat passwords
        
    - name: Test modules
      run: |
        saltgoat monitor system
        saltgoat database mysql status
        saltgoat security-scan
