#!/bin/bash

# SaltGoat 简化安装脚本
# 用法: ./saltgoat install all

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_highlight() {
    echo -e "${CYAN}[HIGHLIGHT]${NC} $1"
}

# 检查是否为 root 用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "此脚本需要 root 权限运行"
        log_info "请使用: sudo $0 $@"
        exit 1
    fi
}

# 安装系统依赖
install_system_deps() {
    log_info "安装系统依赖..."
    
    # 更新包列表
    apt update
    
    # 安装基础工具和编译环境
    apt install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates
    
    # 安装 Python 和开发工具
    apt install -y python3 python3-pip python3-dev python3-setuptools python3-wheel
    
    # 安装编译依赖
    apt install -y build-essential libssl-dev libffi-dev zlib1g-dev
    
    log_success "系统依赖安装完成"
}

# 安装 Salt 及其依赖
install_salt() {
    log_info "检查 Salt 安装状态..."
    
    if command -v salt-call &> /dev/null; then
        log_success "Salt 已安装"
        return
    fi
    
    log_info "安装 Salt 及其依赖..."
    
    # 安装系统依赖
    install_system_deps
    
    # 检查网络连接
    if ! ping -c 1 repo.saltproject.io &> /dev/null; then
        log_warning "无法连接到 Salt 仓库，使用 pip 安装 Salt..."
        
        # 使用 pip 安装 Salt 及其依赖
        pip3 install salt tornado pyzmq pycryptodome msgpack jinja2 looseversion distro --break-system-packages
        
        if command -v salt-call &> /dev/null; then
            log_success "Salt 安装完成（使用 pip）"
        else
            log_error "Salt 安装失败"
            exit 1
        fi
    else
        log_info "尝试使用官方仓库安装 Salt..."
        
        # 添加 Salt 仓库
        curl -fsSL https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/latest/salt-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/salt-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/salt-archive-keyring.gpg] https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/latest jammy main" > /etc/apt/sources.list.d/salt.list
        
        # 更新包列表并安装 Salt
        apt update
        apt install -y salt-minion salt-common
        
        if command -v salt-call &> /dev/null; then
            log_success "Salt 安装完成（使用官方仓库）"
        else
            log_warning "官方仓库安装失败，回退到 pip 安装..."
            pip3 install salt tornado pyzmq pycryptodome msgpack jinja2 looseversion distro --break-system-packages
            
            if command -v salt-call &> /dev/null; then
                log_success "Salt 安装完成（使用 pip）"
            else
                log_error "Salt 安装失败"
                exit 1
            fi
        fi
    fi
    
    # 配置 Salt 为本地模式
    mkdir -p /etc/salt/minion.d
    cat > /etc/salt/minion.d/local.conf << EOF
file_client: local
file_roots:
  base:
    - $(pwd)/salt/states
pillar_roots:
  base:
    - $(pwd)/salt/pillar
EOF
    
    log_success "Salt 配置完成"
}

# 设置 Salt Pillar 值
set_pillar() {
    local key="$1"
    local value="$2"
    
    # 确保 Salt 已安装
    install_salt
    
    log_info "设置 Pillar: $key"
    salt-call --local grains.set "pillar_$key" "$value"
}

# 安装所有组件
install_all() {
    log_info "安装所有 SaltGoat 组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    # 安装核心组件
    salt-call --local state.apply common.system
    salt-call --local state.apply common.packages
    salt-call --local state.apply common.security
    salt-call --local state.apply core.nginx
    salt-call --local state.apply core.php
    salt-call --local state.apply core.mysql
    salt-call --local state.apply core.composer
    
    # 安装可选组件
    salt-call --local state.apply optional.valkey
    salt-call --local state.apply optional.opensearch
    salt-call --local state.apply optional.rabbitmq
    salt-call --local state.apply optional.webmin
    salt-call --local state.apply optional.phpmyadmin
    salt-call --local state.apply optional.certbot
    salt-call --local state.apply optional.fail2ban
    salt-call --local state.apply optional.varnish
    
    log_success "所有组件安装完成"
}

# 安装核心组件
install_core() {
    log_info "安装核心组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply common.system
    salt-call --local state.apply common.packages
    salt-call --local state.apply common.security
    salt-call --local state.apply core.nginx
    salt-call --local state.apply core.php
    salt-call --local state.apply core.mysql
    salt-call --local state.apply core.composer
    
    log_success "核心组件安装完成"
}

# 安装可选组件
install_optional() {
    log_info "安装可选组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply optional.valkey
    salt-call --local state.apply optional.opensearch
    salt-call --local state.apply optional.rabbitmq
    salt-call --local state.apply optional.webmin
    salt-call --local state.apply optional.phpmyadmin
    salt-call --local state.apply optional.certbot
    salt-call --local state.apply optional.fail2ban
    salt-call --local state.apply optional.varnish
    
    log_success "可选组件安装完成"
}

# 优化 Magento 配置
optimize_magento() {
    log_info "优化 Magento 配置..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply optional.magento-optimization
    
    log_success "Magento 配置优化完成"
}

# 显示服务状态
show_status() {
    log_info "检查服务状态..."
    
    # 检查 Salt 状态
    if command -v salt-call &> /dev/null; then
        log_success "Salt: 已安装"
    else
        log_error "Salt: 未安装"
    fi
    
    # 检查服务状态
    services=("nginx" "mysql" "php8.3-fpm" "valkey" "opensearch" "rabbitmq")
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log_success "$service: 运行中"
        else
            log_warning "$service: 未运行"
        fi
    done
}

# 显示版本信息
show_versions() {
    log_highlight "=== SaltGoat 组件版本信息 ==="
    
    echo ""
    log_info "系统信息："
    echo "  OS: $(lsb_release -d | cut -f2)"
    echo "  Kernel: $(uname -r)"
    echo "  Architecture: $(uname -m)"
    
    echo ""
    log_info "核心组件："
    
    # Salt
    if command -v salt-call &> /dev/null; then
        local salt_version=$(salt-call --version | head -1 | awk '{print $2}')
        echo "  Salt: $salt_version"
    else
        echo "  Salt: 未安装"
    fi
    
    # Nginx
    if [ -f /usr/local/nginx/sbin/nginx ]; then
        local nginx_version=$(/usr/local/nginx/sbin/nginx -v 2>&1 | awk '{print $3}' | cut -d'/' -f2)
        echo "  Nginx: $nginx_version"
    elif command -v nginx &> /dev/null; then
        local nginx_version=$(nginx -v 2>&1 | awk '{print $3}' | cut -d'/' -f2)
        echo "  Nginx: $nginx_version"
    else
        echo "  Nginx: 未安装"
    fi
    
    # PHP
    if command -v php &> /dev/null; then
        local php_version=$(php -v 2>/dev/null | head -1 | awk '{print $2}')
        echo "  PHP: $php_version"
    else
        echo "  PHP: 未安装"
    fi
    
    # MySQL
    if command -v mysql &> /dev/null; then
        local mysql_version=$(mysql --version | awk '{print $3}' | cut -d',' -f1)
        echo "  MySQL: $mysql_version"
    else
        echo "  MySQL: 未安装"
    fi
    
    # Composer
    if command -v composer &> /dev/null; then
        local composer_version=$(composer --version 2>/dev/null | head -1 | awk '{print $3}')
        echo "  Composer: $composer_version"
    else
        echo "  Composer: 未安装"
    fi
    
    echo ""
    log_info "可选组件："
    
    # Valkey 8.0.5
    if command -v valkey-server &> /dev/null; then
        local valkey_version=$(valkey-server --version | awk '{print $3}' | cut -d'=' -f2)
        echo "  Valkey: $valkey_version"
    elif command -v redis-server &> /dev/null; then
        local redis_version=$(redis-server --version | awk '{print $3}' | cut -d'=' -f2)
        echo "  Valkey: Redis $redis_version (替代)"
    else
        echo "  Valkey: 未安装"
    fi
    
    # OpenSearch
    if systemctl is-active --quiet opensearch; then
        local opensearch_version=$(curl -s http://localhost:9200 2>/dev/null | grep -o '"number" : "[^"]*"' | cut -d'"' -f4 || echo "已安装")
        echo "  OpenSearch: $opensearch_version"
    else
        echo "  OpenSearch: 未安装"
    fi
    
    # RabbitMQ
    if command -v rabbitmqctl &> /dev/null; then
        local rabbitmq_version=$(rabbitmqctl version 2>/dev/null | head -1 || echo "已安装")
        echo "  RabbitMQ: $rabbitmq_version"
    else
        echo "  RabbitMQ: 未安装"
    fi
    
    # Webmin
    if command -v webmin &> /dev/null; then
        echo "  Webmin: 已安装"
    else
        echo "  Webmin: 未安装"
    fi
    
    # phpMyAdmin
    if [ -d "/usr/share/phpmyadmin" ] || [ -d "/var/www/phpmyadmin" ]; then
        echo "  phpMyAdmin: 已安装"
    else
        echo "  phpMyAdmin: 未安装"
    fi
    
    # Certbot
    if command -v certbot &> /dev/null; then
        local certbot_version=$(certbot --version | awk '{print $2}')
        echo "  Certbot: $certbot_version"
    else
        echo "  Certbot: 未安装"
    fi
    
    # Fail2ban
    if command -v fail2ban-server &> /dev/null; then
        local fail2ban_version=$(fail2ban-server --version 2>&1 | head -1 | awk '{print $2}')
        echo "  Fail2ban: $fail2ban_version"
    else
        echo "  Fail2ban: 未安装"
    fi
    
    # Varnish
    if command -v varnishd &> /dev/null; then
        local varnish_version=$(varnishd -V 2>&1 | head -1 | grep -o 'varnish-[0-9.]*' | cut -d'-' -f2)
        echo "  Varnish: $varnish_version"
    else
        echo "  Varnish: 未安装"
    fi
    
}

# 显示密码信息
show_passwords() {
    log_highlight "=== SaltGoat 配置的密码 ==="
    
    echo ""
    log_info "数据库密码："
    local mysql_pass=$(salt-call --local grains.get pillar_mysql_root_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$mysql_pass" ]] && [[ "$mysql_pass" != "None" ]]; then
        echo "  MySQL Root: $mysql_pass"
    else
        echo "  MySQL Root: SaltGoat2024! (默认)"
    fi
    
    echo ""
    log_info "缓存密码："
    local valkey_pass=$(salt-call --local grains.get pillar_valkey_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$valkey_pass" ]] && [[ "$valkey_pass" != "None" ]]; then
        echo "  Valkey: $valkey_pass"
    else
        echo "  Valkey: Valkey2024! (默认)"
    fi
    
    echo ""
    log_info "消息队列密码："
    local rabbitmq_pass=$(salt-call --local grains.get pillar_rabbitmq_admin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$rabbitmq_pass" ]] && [[ "$rabbitmq_pass" != "None" ]]; then
        echo "  RabbitMQ Admin: $rabbitmq_pass"
    else
        echo "  RabbitMQ Admin: RabbitMQ2024! (默认)"
    fi
    
    echo ""
    log_info "管理界面密码："
    local webmin_pass=$(salt-call --local grains.get pillar_webmin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$webmin_pass" ]] && [[ "$webmin_pass" != "None" ]]; then
        echo "  Webmin: $webmin_pass"
    else
        echo "  Webmin: Webmin2024! (默认)"
    fi
    
    local phpmyadmin_pass=$(salt-call --local grains.get pillar_phpmyadmin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$phpmyadmin_pass" ]] && [[ "$phpmyadmin_pass" != "None" ]]; then
        echo "  phpMyAdmin: $phpmyadmin_pass"
    else
        echo "  phpMyAdmin: phpMyAdmin2024! (默认)"
    fi
    
    echo ""
    log_info "SSL 配置："
    local ssl_email=$(salt-call --local grains.get pillar_ssl_email 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$ssl_email" ]] && [[ "$ssl_email" != "None" ]]; then
        echo "  SSL Email: $ssl_email"
    else
        echo "  SSL Email: admin@example.com (默认)"
    fi
}

# 显示帮助信息
show_help() {
    echo "SaltGoat 简化安装脚本"
    echo ""
    echo "用法: $0 <command> [options]"
    echo ""
    echo "命令:"
    echo "  install all                    - 安装所有组件（自动检测并安装依赖）"
    echo "  install core                   - 安装核心组件"
    echo "  install optional               - 安装可选组件"
    echo "  optimize magento               - 优化 Magento 配置"
    echo "  status                         - 检查服务状态"
    echo "  versions                       - 查看所有组件版本信息"
    echo "  passwords                      - 查看配置的密码"
    echo ""
    echo "选项:"
    echo "  --mysql-password <password>    - MySQL root 密码"
    echo "  --valkey-password <password>   - Valkey 密码"
    echo "  --rabbitmq-password <password> - RabbitMQ 管理员密码"
    echo "  --webmin-password <password>   - Webmin 密码"
    echo "  --phpmyadmin-password <password> - phpMyAdmin 密码"
    echo ""
    echo "示例:"
    echo "  $0 install all"
    echo "  $0 install all --mysql-password 'MyPass123!'"
    echo "  $0 optimize magento"
    echo "  $0 status"
    echo "  $0 versions"
    echo "  $0 passwords"
}

# 主函数
main() {
    echo "=========================================="
    echo "    SaltGoat 简化安装脚本"
    echo "=========================================="
    
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    check_root
    
    # 解析密码参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mysql-password)
                MYSQL_PASSWORD="$2"
                shift 2
                ;;
            --valkey-password)
                VALKEY_PASSWORD="$2"
                shift 2
                ;;
            --rabbitmq-password)
                RABBITMQ_PASSWORD="$2"
                shift 2
                ;;
            --webmin-password)
                WEBMIN_PASSWORD="$2"
                shift 2
                ;;
            --phpmyadmin-password)
                PHPMYADMIN_PASSWORD="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    # 设置密码
    if [[ -n "$MYSQL_PASSWORD" ]]; then
        set_pillar "mysql_root_password" "$MYSQL_PASSWORD"
    fi
    if [[ -n "$VALKEY_PASSWORD" ]]; then
        set_pillar "valkey_password" "$VALKEY_PASSWORD"
    fi
    if [[ -n "$RABBITMQ_PASSWORD" ]]; then
        set_pillar "rabbitmq_admin_password" "$RABBITMQ_PASSWORD"
    fi
    if [[ -n "$WEBMIN_PASSWORD" ]]; then
        set_pillar "webmin_password" "$WEBMIN_PASSWORD"
    fi
    if [[ -n "$PHPMYADMIN_PASSWORD" ]]; then
        set_pillar "phpmyadmin_password" "$PHPMYADMIN_PASSWORD"
    fi
    
    # 解析命令
    case "$1" in
        "install")
            case "$2" in
                "all")
                    log_highlight "开始安装所有 SaltGoat 组件..."
                    install_all
                    ;;
                "core")
                    log_highlight "开始安装核心组件..."
                    install_core
                    ;;
                "optional")
                    log_highlight "开始安装可选组件..."
                    install_optional
                    ;;
                *)
                    log_error "未知的安装选项: $2"
                    log_info "支持: all, core, optional"
                    exit 1
                    ;;
            esac
            ;;
        "optimize")
            case "$2" in
                "magento")
                    log_highlight "开始优化 Magento 配置..."
                    optimize_magento
                    ;;
                *)
                    log_error "未知的优化选项: $2"
                    log_info "支持: magento"
                    exit 1
                    ;;
            esac
            ;;
        "status")
            log_highlight "检查服务状态..."
            show_status
            ;;
        "versions")
            log_highlight "查看组件版本信息..."
            show_versions
            ;;
        "passwords")
            log_highlight "查看配置的密码..."
            show_passwords
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            log_error "未知命令: $1"
            show_help
            exit 1
            ;;
    esac
}

# 运行主函数
main "$@"
