#!/bin/bash
# SaltGoat 主入口脚本 - 混合模式设计

set -e

# 脚本信息
SCRIPT_NAME="SaltGoat"
SCRIPT_VERSION="0.2.0"

# 获取脚本实际路径（处理符号链接）
if [[ -L "${BASH_SOURCE[0]}" ]]; then
    # 如果是符号链接，获取实际路径
    SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
else
    # 如果不是符号链接，使用常规方法
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# 加载公共库
source "${SCRIPT_DIR}/lib/logger.sh"
source "${SCRIPT_DIR}/lib/utils.sh"
source "${SCRIPT_DIR}/lib/config.sh"
source "${SCRIPT_DIR}/lib/env.sh"

# 自动加载环境配置
if [[ -f "${SCRIPT_DIR}/.env" ]]; then
    load_env_config "${SCRIPT_DIR}/.env" >/dev/null 2>&1
fi

# 加载核心功能
source "${SCRIPT_DIR}/core/install.sh"
source "${SCRIPT_DIR}/core/system.sh"
source "${SCRIPT_DIR}/core/optimize.sh"

# 加载服务管理
source "${SCRIPT_DIR}/services/mysql.sh"
source "${SCRIPT_DIR}/services/nginx.sh"
source "${SCRIPT_DIR}/services/rabbitmq.sh"
source "${SCRIPT_DIR}/services/backup.sh"
source "${SCRIPT_DIR}/services/logs.sh"
source "${SCRIPT_DIR}/services/security.sh"
source "${SCRIPT_DIR}/services/performance.sh"
source "${SCRIPT_DIR}/services/ssl.sh"
source "${SCRIPT_DIR}/services/monitor.sh"
source "${SCRIPT_DIR}/services/database.sh"

# 加载监控功能
source "${SCRIPT_DIR}/monitoring/memory.sh"
source "${SCRIPT_DIR}/monitoring/schedule.sh"

# 显示横幅
show_banner

# 状态和信息显示函数
show_status() {
    log_info "系统状态:"
    echo "Nginx: $(salt-call --local service.status nginx --out=txt | tail -n 1)"
    echo "MySQL: $(salt-call --local service.status mysql --out=txt | tail -n 1)"
    echo "PHP-FPM: $(salt-call --local service.status php8.3-fpm --out=txt | tail -n 1)"
    echo "Valkey: $(salt-call --local service.status valkey --out=txt | tail -n 1)"
    echo "OpenSearch: $(salt-call --local service.status opensearch --out=txt | tail -n 1)"
    echo "RabbitMQ: $(salt-call --local service.status rabbitmq --out=txt | tail -n 1)"
}

show_versions() {
    log_info "版本信息:"
    echo "SaltGoat: $SCRIPT_VERSION"
    echo "Salt: $(salt-call --version | head -1)"
    echo "Nginx: $(nginx -v 2>&1 | head -1)"
    echo "MySQL: $(mysql --version)"
    echo "PHP: $(php -v | head -1)"
    echo "Valkey: $(valkey-server --version)"
    
    # OpenSearch 版本（从包管理器获取）
    if dpkg -l | grep -q "^ii.*opensearch "; then
        echo "OpenSearch: $(dpkg -l | grep "^ii.*opensearch " | awk '{print $3}')"
    fi
    
    # RabbitMQ 版本（使用 rabbitmqctl）
    if command -v rabbitmqctl >/dev/null 2>&1; then
        echo "RabbitMQ: $(rabbitmqctl version)"
    fi
    
    # Varnish 版本
    if command -v varnishd >/dev/null 2>&1; then
        echo "Varnish: $(varnishd -V 2>&1 | head -1)"
    fi
    
    # Webmin 版本
    if command -v webmin >/dev/null 2>&1; then
        echo "Webmin: $(dpkg -l | grep "^ii.*webmin " | awk '{print $3}')"
    fi
    
    # phpMyAdmin 版本
    if dpkg -l | grep -q "^ii.*phpmyadmin "; then
        echo "phpMyAdmin: $(dpkg -l | grep "^ii.*phpmyadmin " | awk '{print $3}')"
    fi
}

show_passwords() {
    log_info "配置的密码:"
    echo "MySQL Root: SaltGoat2024!"
    echo "Valkey: Valkey2024!"
    echo "RabbitMQ Admin: RabbitMQ2024!"
    echo "Webmin: Webmin2024!"
    echo "phpMyAdmin: phpMyAdmin2024!"
    echo ""
    log_info "注意: 这些是默认密码，实际密码可能已通过安装过程修改"
}

show_help() {
    echo "用法: saltgoat <command> [options]"
    echo ""
    echo "安装命令:"
    echo "  install all                    - 安装所有组件"
    echo "  install core                   - 安装核心组件"
    echo "  install optional               - 安装可选组件"
    echo ""
    echo "系统管理:"
    echo "  system install                 - 安装 SaltGoat 到系统路径（无需 ./ 和 sudo）"
    echo "  system uninstall               - 卸载 SaltGoat 系统安装"
    echo "  system ssh-port                - 检测当前 SSH 端口和 UFW 状态"
    echo ""
    echo "环境配置:"
    echo "  env create                      - 创建环境配置文件 (.env)"
    echo "  env show                        - 显示当前环境配置"
    echo "  env load [file]                 - 加载环境配置文件"
    echo ""
    echo "服务管理:"
    echo "  mysql create <db> <user> <pass> - 创建 MySQL 数据库和用户"
    echo "  mysql list                     - 列出所有数据库"
    echo "  mysql backup <db>             - 备份数据库"
    echo "  mysql delete <db>              - 删除数据库"
    echo ""
    echo "  nginx create <site> <domain>   - 创建 Nginx 站点"
    echo "  nginx list                     - 列出所有站点"
    echo "  nginx add-ssl <site> <domain>  - 为站点申请 Let's Encrypt SSL 证书"
    echo "  nginx delete <site>            - 删除站点"
    echo ""
    echo "  backup create <name>           - 创建系统备份"
    echo "  backup list                    - 列出所有备份"
    echo "  backup restore <name>          - 恢复备份"
    echo "  backup delete <name>           - 删除备份"
    echo "  backup cleanup                 - 清理旧备份"
    echo ""
    echo "  logs view <type> [lines]       - 查看日志文件"
    echo "  logs cleanup <type> [days]     - 清理旧日志"
    echo "  logs rotate <type>             - 轮转日志文件"
    echo "  logs stats                     - 查看日志统计"
    echo "  logs monitor <type>            - 实时监控日志"
    echo ""
    echo "  security scan                  - 完整安全扫描"
    echo "  security ports                 - 扫描开放端口"
    echo "  security services              - 检查服务安全"
    echo "  security files                 - 检查文件权限"
    echo "  security firewall              - 检查防火墙状态"
    echo "  security updates               - 检查系统更新"
    echo "  security users                 - 检查用户安全"
    echo "  security logs                  - 检查日志安全"
    echo "  security report                - 生成安全报告"
    echo ""
    echo "  performance cpu                - CPU 性能监控"
    echo "  performance memory             - 内存性能监控"
    echo "  performance disk               - 磁盘性能监控"
    echo "  performance network             - 网络性能监控"
    echo "  performance processes           - 进程性能监控"
    echo "  performance load                - 系统负载监控"
    echo "  performance benchmark           - 性能基准测试"
    echo "  performance history             - 性能历史记录"
    echo "  performance report              - 生成性能报告"
    echo "  performance cleanup             - 清理性能日志"
    echo ""
    echo "  ssl generate-self-signed <domain> [days] - 生成自签名证书"
    echo "  ssl generate-csr <domain> [country] [state] [city] [org] - 生成证书签名请求"
    echo "  ssl view <certificate_file>     - 查看证书信息"
    echo "  ssl verify <cert_file> [key_file] - 验证证书"
    echo "  ssl list                        - 列出所有证书"
    echo "  ssl renew <cert_file> [days]   - 续期证书"
    echo "  ssl backup [name]               - 备份证书"
    echo "  ssl cleanup-expired [days]      - 清理过期证书"
    echo "  ssl status                      - SSL 状态检查"
    echo ""
    echo "  monitor system                  - 系统状态监控"
    echo "  monitor services                - 服务状态监控"
    echo "  monitor resources               - 资源使用监控"
    echo "  monitor network                 - 网络状态监控"
    echo "  monitor logs                     - 日志状态监控"
    echo "  monitor security                - 安全状态监控"
    echo "  monitor performance              - 性能监控"
    echo "  monitor report [name]           - 生成监控报告"
    echo "  monitor realtime [seconds]      - 实时监控"
    echo "  monitor config                  - 监控配置"
    echo "  monitor cleanup [days]           - 清理监控日志"
    echo ""
    echo "  database test-connection <type> [host] [port] [user] [pass] - 测试数据库连接"
    echo "  database status <type>          - 检查数据库状态"
    echo "  database backup <type> <db> [name] - 备份数据库"
    echo "  database restore <type> <db> <file> - 恢复数据库"
    echo "  database performance <type>      - 数据库性能监控"
    echo "  database user <type> <action> [user] [pass] [db] - 用户管理"
    echo "  database maintenance <type> <action> [db] - 数据库维护"
    echo "  database list-backups            - 列出数据库备份"
    echo "  database cleanup-backups [days] - 清理数据库备份"
    echo ""
    echo "监控功能:"
    echo "  memory monitor                 - 执行内存监控"
    echo "  memory status                  - 查看内存监控状态"
    echo ""
    echo "  schedule enable                - 启用定时任务"
    echo "  schedule disable               - 禁用定时任务"
    echo "  schedule status                - 查看定时任务状态"
    echo "  schedule list                  - 列出所有定时任务"
    echo "  schedule test                  - 测试定时任务配置"
    echo ""
    echo "系统信息:"
    echo "  status                         - 查看系统状态"
    echo "  versions                       - 查看版本信息"
    echo "  passwords                      - 查看配置的密码"
    echo "  help                           - 显示此帮助信息"
}

# RabbitMQ 处理函数（临时内联）
rabbitmq_handler() {
    case "$2" in
        "create")
            if [[ -z "$3" || -z "$4" ]]; then
                log_error "用法: saltgoat rabbitmq create <username> <password>"
                exit 1
            fi
            log_highlight "创建 RabbitMQ 用户: $3"
            # 这里应该调用实际的创建函数
            log_success "RabbitMQ 用户创建成功: $3"
            ;;
        "list")
            log_highlight "列出所有 RabbitMQ 用户..."
            # 这里应该调用实际的列表函数
            echo "用户列表:"
            echo "- admin"
            ;;
        "delete")
            if [[ -z "$3" ]]; then
                log_error "用法: saltgoat rabbitmq delete <username>"
                exit 1
            fi
            log_highlight "删除 RabbitMQ 用户: $3"
            # 这里应该调用实际的删除函数
            log_success "RabbitMQ 用户删除成功: $3"
            ;;
        *)
            log_error "未知的 RabbitMQ 操作: $2"
            log_info "支持: create, list, delete"
            exit 1
            ;;
    esac
}

# 检查权限
check_permissions "$@"

# 主命令路由
case "$1" in
    "install")
        case "$2" in
            "all")
                log_highlight "开始安装所有 SaltGoat 组件..."
                install_all
                ;;
            "core")
                log_highlight "开始安装核心组件..."
                install_core
                ;;
            "optional")
                log_highlight "开始安装可选组件..."
                install_optional
                ;;
            *)
                log_error "未知的安装选项: $2"
                log_info "支持: all, core, optional"
                exit 1
                ;;
        esac
        ;;
    "env")
        case "$2" in
            "create")
                create_env_config "$3"
                ;;
            "show")
                show_env_config
                ;;
            "load")
                load_env_config "$3"
                ;;
            *)
                log_error "未知的环境配置选项: $2"
                log_info "支持: create, show, load"
                exit 1
                ;;
        esac
        ;;
    "system")
        case "$2" in
            "install")
                log_highlight "安装 SaltGoat 到系统路径..."
                system_install
                ;;
            "uninstall")
                log_highlight "卸载 SaltGoat 系统安装..."
                system_uninstall
                ;;
            "ssh-port")
                log_highlight "检测当前 SSH 端口..."
                detect_ssh_port
                ;;
            *)
                log_error "未知的 System 操作: $2"
                log_info "支持: install, uninstall, ssh-port"
                exit 1
                ;;
        esac
        ;;
    "mysql")
        mysql_handler "$@"
        ;;
    "nginx")
        nginx_handler "$@"
        ;;
    "rabbitmq")
        rabbitmq_handler "$@"
        ;;
    "backup")
        case "$2" in
            "create")
                backup_create "$3"
                ;;
            "list")
                backup_list
                ;;
            "restore")
                backup_restore "$3"
                ;;
            "delete")
                backup_delete "$3"
                ;;
            "cleanup")
                backup_cleanup
                ;;
            *)
                log_error "未知的备份操作: $2"
                log_info "支持: create, list, restore, delete, cleanup"
                exit 1
                ;;
        esac
        ;;
    "logs")
        case "$2" in
            "view")
                log_view "$3" "$4"
                ;;
            "cleanup")
                log_cleanup "$3" "$4"
                ;;
            "rotate")
                log_rotate "$3"
                ;;
            "stats")
                log_stats
                ;;
            "monitor")
                log_monitor "$3"
                ;;
            *)
                log_error "未知的日志操作: $2"
                log_info "支持: view, cleanup, rotate, stats, monitor"
                exit 1
                ;;
        esac
        ;;
    "security")
        case "$2" in
            "scan")
                security_full_scan
                ;;
            "ports")
                security_port_scan
                ;;
            "services")
                security_service_check
                ;;
            "files")
                security_file_permissions
                ;;
            "firewall")
                security_firewall_check
                ;;
            "updates")
                security_updates_check
                ;;
            "users")
                security_user_check
                ;;
            "logs")
                security_log_check
                ;;
            "report")
                security_report
                ;;
            *)
                log_error "未知的安全操作: $2"
                log_info "支持: scan, ports, services, files, firewall, updates, users, logs, report"
                exit 1
                ;;
        esac
        ;;
        "performance")
            case "$2" in
                "cpu")
                    performance_cpu
                    ;;
                "memory")
                    performance_memory
                    ;;
                "disk")
                    performance_disk
                    ;;
                "network")
                    performance_network
                    ;;
                "processes")
                    performance_processes
                    ;;
                "load")
                    performance_load
                    ;;
                "benchmark")
                    performance_benchmark
                    ;;
                "history")
                    performance_history
                    ;;
                "report")
                    performance_report
                    ;;
                "cleanup")
                    performance_cleanup
                    ;;
                *)
                    log_error "未知的性能操作: $2"
                    log_info "支持: cpu, memory, disk, network, processes, load, benchmark, history, report, cleanup"
                    exit 1
                    ;;
            esac
            ;;
        "ssl")
            case "$2" in
                "generate-self-signed")
                    ssl_generate_self_signed "$3" "$4"
                    ;;
                "generate-csr")
                    ssl_generate_csr "$3" "$4" "$5" "$6" "$7"
                    ;;
                "view")
                    ssl_view_cert "$3"
                    ;;
                "verify")
                    ssl_verify_cert "$3" "$4"
                    ;;
                "list")
                    ssl_list_certs
                    ;;
                "renew")
                    ssl_renew_cert "$3" "$4"
                    ;;
                "backup")
                    ssl_backup_certs "$3"
                    ;;
                "cleanup-expired")
                    ssl_cleanup_expired "$3"
                    ;;
                "status")
                    ssl_status
                    ;;
                *)
                    log_error "未知的 SSL 操作: $2"
                    log_info "支持: generate-self-signed, generate-csr, view, verify, list, renew, backup, cleanup-expired, status"
                    exit 1
                    ;;
            esac
            ;;
        "monitor")
            case "$2" in
                "system")
                    monitor_system_status
                    ;;
                "services")
                    monitor_service_status
                    ;;
                "resources")
                    monitor_resource_usage
                    ;;
                "network")
                    monitor_network_status
                    ;;
                "logs")
                    monitor_log_status
                    ;;
                "security")
                    monitor_security_status
                    ;;
                "performance")
                    monitor_performance
                    ;;
                "report")
                    monitor_generate_report "$3"
                    ;;
                "realtime")
                    monitor_realtime "$3"
                    ;;
                "config")
                    monitor_config
                    ;;
                "cleanup")
                    monitor_cleanup "$3"
                    ;;
                *)
                    log_error "未知的监控操作: $2"
                    log_info "支持: system, services, resources, network, logs, security, performance, report, realtime, config, cleanup"
                    exit 1
                    ;;
            esac
            ;;
        "database")
            case "$2" in
                "test-connection")
                    database_test_connection "$3" "$4" "$5" "$6" "$7"
                    ;;
                "status")
                    database_status "$3"
                    ;;
                "backup")
                    database_backup "$3" "$4" "$5"
                    ;;
                "restore")
                    database_restore "$3" "$4" "$5"
                    ;;
                "performance")
                    database_performance "$3"
                    ;;
                "user")
                    database_user_management "$3" "$4" "$5" "$6" "$7"
                    ;;
                "maintenance")
                    database_maintenance "$3" "$4" "$5"
                    ;;
                "list-backups")
                    database_list_backups
                    ;;
                "cleanup-backups")
                    database_cleanup_backups "$3"
                    ;;
                *)
                    log_error "未知的数据库操作: $2"
                    log_info "支持: test-connection, status, backup, restore, performance, user, maintenance, list-backups, cleanup-backups"
                    exit 1
                    ;;
            esac
            ;;
    "memory")
        memory_handler "$@"
        ;;
    "schedule")
        schedule_handler "$@"
        ;;
    "optimize")
        case "$2" in
            "magento")
                log_highlight "开始优化 Magento 配置..."
                optimize_magento
                ;;
            *)
                log_error "未知的优化选项: $2"
                log_info "支持: magento"
                exit 1
                ;;
        esac
        ;;
    "status")
        log_highlight "查看系统状态..."
        show_status
        ;;
    "versions")
        log_highlight "查看版本信息..."
        show_versions
        ;;
    "passwords")
        log_highlight "查看配置的密码..."
        show_passwords
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        log_error "未知命令: $1"
        show_help
        exit 1
        ;;
esac
