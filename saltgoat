#!/bin/bash

# SaltGoat 简化安装脚本
# 用法: ./saltgoat install all

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_highlight() {
    echo -e "${CYAN}[HIGHLIGHT]${NC} $1"
}

# 检查是否为 root 用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "此脚本需要 root 权限运行"
        log_info "请使用: sudo $0 $@"
        exit 1
    fi
}

# 安装系统依赖
install_system_deps() {
    log_info "安装系统依赖..."
    
    # 更新包列表
    apt update
    
    # 安装基础工具和编译环境
    apt install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates
    
    # 安装 Python 和开发工具
    apt install -y python3 python3-pip python3-dev python3-setuptools python3-wheel
    
    # 安装编译依赖
    apt install -y build-essential libssl-dev libffi-dev zlib1g-dev
    
    log_success "系统依赖安装完成"
}

# 安装 Salt 及其依赖
install_salt() {
    log_info "检查 Salt 安装状态..."
    
    if command -v salt-call &> /dev/null; then
        log_success "Salt 已安装"
        return
    fi
    
    log_info "安装 Salt 及其依赖..."
    
    # 安装系统依赖
    install_system_deps
    
    # 检查网络连接
    if ! ping -c 1 repo.saltproject.io &> /dev/null; then
        log_warning "无法连接到 Salt 仓库，使用 pip 安装 Salt..."
        
        # 使用 pip 安装 Salt 及其依赖
        pip3 install salt tornado pyzmq pycryptodome msgpack jinja2 looseversion distro --break-system-packages
        
        if command -v salt-call &> /dev/null; then
            log_success "Salt 安装完成（使用 pip）"
        else
            log_error "Salt 安装失败"
            exit 1
        fi
    else
        log_info "尝试使用官方仓库安装 Salt..."
        
        # 添加 Salt 仓库
        curl -fsSL https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/latest/salt-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/salt-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/salt-archive-keyring.gpg] https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/latest jammy main" > /etc/apt/sources.list.d/salt.list
        
        # 更新包列表并安装 Salt
        apt update
        apt install -y salt-minion salt-common
        
        if command -v salt-call &> /dev/null; then
            log_success "Salt 安装完成（使用官方仓库）"
        else
            log_warning "官方仓库安装失败，回退到 pip 安装..."
            pip3 install salt tornado pyzmq pycryptodome msgpack jinja2 looseversion distro --break-system-packages
            
            if command -v salt-call &> /dev/null; then
                log_success "Salt 安装完成（使用 pip）"
            else
                log_error "Salt 安装失败"
                exit 1
            fi
        fi
    fi
    
    # 配置 Salt 为本地模式
    mkdir -p /etc/salt/minion.d
    cat > /etc/salt/minion.d/local.conf << EOF
file_client: local
file_roots:
  base:
    - $(pwd)/salt/states
pillar_roots:
  base:
    - $(pwd)/salt/pillar
EOF
    
    log_success "Salt 配置完成"
}

# 设置 Salt Pillar 值
set_pillar() {
    local key="$1"
    local value="$2"
    
    # 确保 Salt 已安装
    install_salt
    
    log_info "设置 Pillar: $key"
    salt-call --local grains.set "pillar_$key" "$value"
}

# 安装所有组件
install_all() {
    log_info "安装所有 SaltGoat 组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    # 安装核心组件
    salt-call --local state.apply common.system
    salt-call --local state.apply common.packages
    salt-call --local state.apply common.security
    salt-call --local state.apply core.nginx
    salt-call --local state.apply core.php
    salt-call --local state.apply core.mysql
    salt-call --local state.apply core.composer
    
    # 安装可选组件
    salt-call --local state.apply optional.valkey
    salt-call --local state.apply optional.opensearch
    salt-call --local state.apply optional.rabbitmq
    salt-call --local state.apply optional.webmin
    salt-call --local state.apply optional.phpmyadmin
    salt-call --local state.apply optional.certbot
    salt-call --local state.apply optional.fail2ban
    salt-call --local state.apply optional.varnish
    
    log_success "所有组件安装完成"
}

# 安装核心组件
install_core() {
    log_info "安装核心组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply common.system
    salt-call --local state.apply common.packages
    salt-call --local state.apply common.security
    salt-call --local state.apply core.nginx
    salt-call --local state.apply core.php
    salt-call --local state.apply core.mysql
    salt-call --local state.apply core.composer
    
    log_success "核心组件安装完成"
}

# 安装可选组件
install_optional() {
    log_info "安装可选组件..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply optional.valkey
    salt-call --local state.apply optional.opensearch
    salt-call --local state.apply optional.rabbitmq
    salt-call --local state.apply optional.webmin
    salt-call --local state.apply optional.phpmyadmin
    salt-call --local state.apply optional.certbot
    salt-call --local state.apply optional.fail2ban
    salt-call --local state.apply optional.varnish
    
    log_success "可选组件安装完成"
}

# 优化 Magento 配置
optimize_magento() {
    log_info "优化 Magento 配置..."
    
    # 确保 Salt 已安装
    install_salt
    
    salt-call --local state.apply optional.magento-optimization
    
    log_success "Magento 配置优化完成"
}

# 显示服务状态
show_status() {
    log_info "检查服务状态..."
    
    # 检查 Salt 状态
    if command -v salt-call &> /dev/null; then
        log_success "Salt: 已安装"
    else
        log_error "Salt: 未安装"
    fi
    
    # 检查服务状态
    services=("nginx" "mysql" "php8.3-fpm" "valkey" "opensearch" "rabbitmq")
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log_success "$service: 运行中"
        else
            log_warning "$service: 未运行"
        fi
    done
}

# 显示版本信息
show_versions() {
    log_highlight "=== SaltGoat 组件版本信息 ==="
    
    echo ""
    log_info "系统信息："
    echo "  OS: $(lsb_release -d | cut -f2)"
    echo "  Kernel: $(uname -r)"
    echo "  Architecture: $(uname -m)"
    
    echo ""
    log_info "核心组件："
    
    # Salt
    if command -v salt-call &> /dev/null; then
        local salt_version=$(salt-call --version | head -1 | awk '{print $2}')
        echo "  Salt: $salt_version"
    else
        echo "  Salt: 未安装"
    fi
    
    # Nginx
    if [ -f /usr/local/nginx/sbin/nginx ]; then
        local nginx_version=$(/usr/local/nginx/sbin/nginx -v 2>&1 | awk '{print $3}' | cut -d'/' -f2)
        echo "  Nginx: $nginx_version"
    elif command -v nginx &> /dev/null; then
        local nginx_version=$(nginx -v 2>&1 | awk '{print $3}' | cut -d'/' -f2)
        echo "  Nginx: $nginx_version"
    else
        echo "  Nginx: 未安装"
    fi
    
    # PHP
    if command -v php &> /dev/null; then
        local php_version=$(php -v 2>/dev/null | head -1 | awk '{print $2}')
        echo "  PHP: $php_version"
    else
        echo "  PHP: 未安装"
    fi
    
    # MySQL
    if command -v mysql &> /dev/null; then
        local mysql_version=$(mysql --version | awk '{print $3}' | cut -d',' -f1)
        echo "  MySQL: $mysql_version"
    else
        echo "  MySQL: 未安装"
    fi
    
    # Composer
    if command -v composer &> /dev/null; then
        local composer_version=$(composer --version 2>/dev/null | head -1 | awk '{print $3}')
        echo "  Composer: $composer_version"
    else
        echo "  Composer: 未安装"
    fi
    
    echo ""
    log_info "可选组件："
    
    # Valkey 8.0.5
    if command -v valkey-server &> /dev/null; then
        local valkey_version=$(valkey-server --version | awk '{print $3}' | cut -d'=' -f2)
        echo "  Valkey: $valkey_version"
    elif command -v redis-server &> /dev/null; then
        local redis_version=$(redis-server --version | awk '{print $3}' | cut -d'=' -f2)
        echo "  Valkey: Redis $redis_version (替代)"
    else
        echo "  Valkey: 未安装"
    fi
    
    # OpenSearch
    if systemctl is-active --quiet opensearch; then
        local opensearch_version=$(curl -s http://localhost:9200 2>/dev/null | grep -o '"number" : "[^"]*"' | cut -d'"' -f4 || echo "已安装")
        echo "  OpenSearch: $opensearch_version"
    else
        echo "  OpenSearch: 未安装"
    fi
    
    # RabbitMQ
    if command -v rabbitmqctl &> /dev/null; then
        local rabbitmq_version=$(rabbitmqctl version 2>/dev/null | head -1 || echo "已安装")
        echo "  RabbitMQ: $rabbitmq_version"
    else
        echo "  RabbitMQ: 未安装"
    fi
    
    # Webmin
    if command -v webmin &> /dev/null; then
        echo "  Webmin: 已安装"
    else
        echo "  Webmin: 未安装"
    fi
    
    # phpMyAdmin
    if [ -d "/usr/share/phpmyadmin" ] || [ -d "/var/www/phpmyadmin" ]; then
        echo "  phpMyAdmin: 已安装"
    else
        echo "  phpMyAdmin: 未安装"
    fi
    
    # Certbot
    if command -v certbot &> /dev/null; then
        local certbot_version=$(certbot --version | awk '{print $2}')
        echo "  Certbot: $certbot_version"
    else
        echo "  Certbot: 未安装"
    fi
    
    # Fail2ban
    if command -v fail2ban-server &> /dev/null; then
        local fail2ban_version=$(fail2ban-server --version 2>&1 | head -1 | awk '{print $2}')
        echo "  Fail2ban: $fail2ban_version"
    else
        echo "  Fail2ban: 未安装"
    fi
    
    # Varnish
    if command -v varnishd &> /dev/null; then
        local varnish_version=$(varnishd -V 2>&1 | head -1 | grep -o 'varnish-[0-9.]*' | cut -d'-' -f2)
        echo "  Varnish: $varnish_version"
    else
        echo "  Varnish: 未安装"
    fi
    
}

# 显示密码信息
show_passwords() {
    log_highlight "=== SaltGoat 配置的密码 ==="
    
    echo ""
    log_info "数据库密码："
    local mysql_pass=$(salt-call --local grains.get pillar_mysql_root_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$mysql_pass" ]] && [[ "$mysql_pass" != "None" ]]; then
        echo "  MySQL Root: $mysql_pass"
    else
        echo "  MySQL Root: SaltGoat2024! (默认)"
    fi
    
    echo ""
    log_info "缓存密码："
    local valkey_pass=$(salt-call --local grains.get pillar_valkey_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$valkey_pass" ]] && [[ "$valkey_pass" != "None" ]]; then
        echo "  Valkey: $valkey_pass"
    else
        echo "  Valkey: Valkey2024! (默认)"
    fi
    
    echo ""
    log_info "消息队列密码："
    local rabbitmq_pass=$(salt-call --local grains.get pillar_rabbitmq_admin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$rabbitmq_pass" ]] && [[ "$rabbitmq_pass" != "None" ]]; then
        echo "  RabbitMQ Admin: $rabbitmq_pass"
    else
        echo "  RabbitMQ Admin: RabbitMQ2024! (默认)"
    fi
    
    echo ""
    log_info "管理界面密码："
    local webmin_pass=$(salt-call --local grains.get pillar_webmin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$webmin_pass" ]] && [[ "$webmin_pass" != "None" ]]; then
        echo "  Webmin: $webmin_pass"
    else
        echo "  Webmin: Webmin2024! (默认)"
    fi
    
    local phpmyadmin_pass=$(salt-call --local grains.get pillar_phpmyadmin_password 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$phpmyadmin_pass" ]] && [[ "$phpmyadmin_pass" != "None" ]]; then
        echo "  phpMyAdmin: $phpmyadmin_pass"
    else
        echo "  phpMyAdmin: phpMyAdmin2024! (默认)"
    fi
    
    echo ""
    log_info "SSL 配置："
    local ssl_email=$(salt-call --local grains.get pillar_ssl_email 2>/dev/null | grep -v "local:" | tail -1 | xargs)
    if [[ -n "$ssl_email" ]] && [[ "$ssl_email" != "None" ]]; then
        echo "  SSL Email: $ssl_email"
    else
        echo "  SSL Email: admin@example.com (默认)"
    fi
}

# MySQL 管理函数（Salt 原生方式）
mysql_create_site() {
    local site="$1"
    local password="$2"
    
    # 使用 Salt 创建数据库
    salt-call --local mysql.db_create "${site}_db"
    
    # 使用 Salt 创建用户（使用 caching_sha2_password 插件）
    salt-call --local mysql.user_create "${site}_user" password="$password" host="localhost" auth_plugin="caching_sha2_password"
    
    # 使用 Salt 授权
    salt-call --local mysql.grant_add "${site}_user" "${site}_db" "ALL PRIVILEGES" host="localhost"
    
    log_success "MySQL 数据库和用户创建成功: ${site}_db / ${site}_user"
}

mysql_list_sites() {
    # 使用 Salt 列出数据库
    echo "MySQL 数据库列表:"
    salt-call --local mysql.db_list | grep -v "local:" | tail -1 | xargs
}

mysql_backup_site() {
    local site="$1"
    
    # 创建备份目录
    mkdir -p /backup/mysql
    
    # 使用 Salt 备份数据库
    local backup_file="/backup/mysql/${site}_db_$(date +%Y%m%d_%H%M%S).sql"
    salt-call --local mysql.dump "${site}_db" > "$backup_file"
    
    log_success "数据库备份完成: $backup_file"
}

mysql_delete_site() {
    local site="$1"
    
    # 使用 Salt 删除数据库
    salt-call --local mysql.db_remove "${site}_db"
    
    # 使用 Salt 删除用户
    salt-call --local mysql.user_remove "${site}_user" host="localhost"
    
    log_success "MySQL 数据库和用户删除成功: ${site}_db / ${site}_user"
}

# Nginx 管理函数（Salt 原生方式）
nginx_create_site() {
    local site="$1"
    local domain="$2"
    
    # 使用 Salt 创建站点配置
    salt-call --local file.write "/usr/local/nginx/conf/sites-available/${site}" "server {
    listen 80;
    server_name $domain;
    root /var/www/$site;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.3-fpm.sock;
        fastcgi_index index.php;
    }
}"
    
    # 使用 Salt 创建符号链接
    salt-call --local file.symlink "/usr/local/nginx/conf/sites-available/${site}" "/usr/local/nginx/conf/sites-enabled/${site}"
    
    # 使用 Salt 创建网站目录
    salt-call --local file.mkdir "/var/www/$site"
    salt-call --local file.write "/var/www/$site/index.html" "<h1>Welcome to $site</h1>"
    salt-call --local file.chown "/var/www/$site" user="www-data" group="www-data" recurse=True
    
    # 测试配置并重载
    salt-call --local cmd.run "/usr/local/nginx/sbin/nginx -t"
    salt-call --local service.reload nginx
    
    log_success "Nginx 站点创建成功: $site ($domain)"
}

nginx_list_sites() {
    echo "Nginx 站点列表:"
    salt-call --local file.readlink "/usr/local/nginx/conf/sites-enabled/" | grep -v "default" | awk '{print $9}' | grep -v "^$"
}

nginx_add_ssl() {
    local site="$1"
    local domain="$2"
    
    # 使用 Salt 运行 certbot
    salt-call --local cmd.run "certbot --nginx -d $domain --non-interactive --agree-tos --email admin@example.com"
    
    log_success "SSL 证书添加成功: $site ($domain)"
}

nginx_delete_site() {
    local site="$1"
    
    # 使用 Salt 删除站点配置
    salt-call --local file.remove "/usr/local/nginx/conf/sites-available/${site}"
    salt-call --local file.remove "/usr/local/nginx/conf/sites-enabled/${site}"
    
    # 使用 Salt 删除网站目录
    salt-call --local file.remove "/var/www/$site"
    
    # 重载 Nginx
    salt-call --local service.reload nginx
    
    log_success "Nginx 站点删除成功: $site"
}

# RabbitMQ 管理函数（Salt 原生方式）
rabbitmq_create_user() {
    local site="$1"
    local password="$2"
    
    # 使用 Salt 创建用户
    salt-call --local rabbitmq.add_user "${site}_user" "$password"
    
    # 使用 Salt 设置用户标签
    salt-call --local rabbitmq.set_user_tags "${site}_user" administrator
    
    # 使用 Salt 创建虚拟主机
    salt-call --local rabbitmq.add_vhost "${site}_vhost"
    
    # 使用 Salt 设置权限
    salt-call --local rabbitmq.set_permissions "${site}_user" "${site}_vhost" ".*" ".*" ".*"
    
    log_success "RabbitMQ 用户创建成功: ${site}_user / ${site}_vhost"
}

rabbitmq_list_users() {
    echo "RabbitMQ 用户列表:"
    salt-call --local rabbitmq.list_users | grep -v "local:" | tail -1 | xargs
}

rabbitmq_delete_user() {
    local site="$1"
    
    # 使用 Salt 删除用户和虚拟主机
    salt-call --local rabbitmq.delete_user "${site}_user"
    salt-call --local rabbitmq.delete_vhost "${site}_vhost"
    
    log_success "RabbitMQ 用户删除成功: ${site}_user / ${site}_vhost"
}

# Schedule 管理函数
schedule_enable() {
    salt-call --local state.apply schedules.saltgoat
    log_success "SaltGoat 定时任务已启用"
}

schedule_disable() {
    salt-call --local schedule.delete memory_monitor
    salt-call --local schedule.delete system_update
    salt-call --local schedule.delete log_cleanup
    salt-call --local schedule.delete database_backup
    salt-call --local schedule.delete service_health_check
    salt-call --local schedule.delete disk_space_check
    salt-call --local schedule.delete security_updates
    log_success "SaltGoat 定时任务已禁用"
}

schedule_status() {
    local tasks=("memory_monitor" "system_update" "log_cleanup" "database_backup" "service_health_check" "disk_space_check" "security_updates")
    
    for task in "${tasks[@]}"; do
        echo "任务: $task"
        local result=$(salt-call --local schedule.list 2>/dev/null | grep -A 5 "$task" || echo "  未配置")
        echo "$result"
        echo
    done
}

schedule_list() {
    salt-call --local schedule.list
}

schedule_test() {
    log_info "测试内存监控..."
    /usr/local/bin/saltgoat-memory-monitor
    echo
    
    log_info "测试服务状态..."
    salt-call --local service.status nginx mysql php8.3-fpm valkey opensearch rabbitmq
    echo
    
    log_info "测试磁盘使用..."
    salt-call --local disk.usage
    echo
    
    log_success "定时任务配置测试完成"
}

# 系统管理函数
system_install() {
    # 检查是否以 root 运行
    if [[ $EUID -eq 0 ]]; then
        log_error "请不要以 root 用户运行此命令"
        log_info "请使用普通用户运行: saltgoat system install"
        exit 1
    fi
    
    # 获取 SaltGoat 安装路径
    local saltgoat_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    log_info "SaltGoat 路径: $saltgoat_path"
    
    # 创建符号链接到 /usr/local/bin
    sudo ln -sf "$saltgoat_path/saltgoat" /usr/local/bin/saltgoat
    log_success "已创建符号链接: /usr/local/bin/saltgoat"
    
    # 配置 sudo 权限
    log_info "正在配置 sudo 权限..."
    
    # 检查是否已存在配置
    if sudo grep -q "saltgoat" /etc/sudoers.d/saltgoat 2>/dev/null; then
        log_warning "sudo 配置已存在，跳过"
    else
        # 创建 sudoers.d 文件
        sudo tee /etc/sudoers.d/saltgoat > /dev/null << EOF
# SaltGoat 权限配置
# 允许当前用户无密码运行 SaltGoat 相关命令
$USER ALL=(ALL) NOPASSWD: /usr/local/bin/saltgoat
EOF
        
        log_success "已配置 sudo 权限"
    fi
    
    # 创建用户别名
    log_info "正在创建用户别名..."
    
    # 检查是否已存在别名
    if grep -q "saltgoat" ~/.bashrc 2>/dev/null; then
        log_warning "别名已存在，跳过"
    else
        # 添加别名到 ~/.bashrc
        cat >> ~/.bashrc << EOF

# SaltGoat 别名
alias saltgoat='sudo /usr/local/bin/saltgoat'
EOF
        
        log_success "已创建用户别名"
    fi
    
    # 测试安装
    log_info "正在测试安装..."
    
    # 测试 saltgoat 命令
    if command -v saltgoat >/dev/null 2>&1; then
        log_success "saltgoat 命令可用"
    else
        log_error "saltgoat 命令不可用"
        return 1
    fi
    
    # 测试 sudo 权限
    if sudo -n saltgoat --help >/dev/null 2>&1; then
        log_success "sudo 权限配置正确"
    else
        log_warning "sudo 权限配置可能有问题，请手动检查"
    fi
    
    # 显示使用说明
    echo
    log_success "SaltGoat 系统安装完成！"
    echo
    echo "现在你可以直接使用以下命令："
    echo "  saltgoat install all"
    echo "  saltgoat status"
    echo "  saltgoat versions"
    echo "  saltgoat passwords"
    echo "  saltgoat optimize magento"
    echo "  saltgoat mysql create mysite mypassword"
    echo "  saltgoat schedule enable"
    echo
    echo "注意：首次使用需要重新加载 shell 环境："
    echo "  source ~/.bashrc"
    echo "  或者重新打开终端"
    echo
}

system_uninstall() {
    # 检查是否以 root 运行
    if [[ $EUID -eq 0 ]]; then
        log_error "请不要以 root 用户运行此命令"
        log_info "请使用普通用户运行: saltgoat system uninstall"
        exit 1
    fi
    
    log_info "正在移除符号链接..."
    
    # 移除 saltgoat 符号链接
    if [[ -L /usr/local/bin/saltgoat ]]; then
        sudo rm -f /usr/local/bin/saltgoat
        log_success "已移除 /usr/local/bin/saltgoat"
    else
        log_warning "/usr/local/bin/saltgoat 不存在或不是符号链接"
    fi
    
    # 移除 sudo 配置
    log_info "正在移除 sudo 配置..."
    
    if [[ -f /etc/sudoers.d/saltgoat ]]; then
        sudo rm -f /etc/sudoers.d/saltgoat
        log_success "已移除 sudo 配置文件"
    else
        log_warning "sudo 配置文件不存在"
    fi
    
    # 移除用户别名
    log_info "正在移除用户别名..."
    
    # 备份原始文件
    cp ~/.bashrc ~/.bashrc.backup.$(date +%Y%m%d_%H%M%S)
    
    # 移除 SaltGoat 相关别名
    sed -i '/# SaltGoat 别名/,/^$/d' ~/.bashrc
    
    log_success "已移除用户别名"
    
    # 显示卸载完成信息
    echo
    log_success "SaltGoat 系统卸载完成！"
    echo
    echo "已移除的内容："
    echo "  - 系统符号链接"
    echo "  - sudo 权限配置"
    echo "  - 用户别名"
    echo
    echo "注意："
    echo "  - 原始 SaltGoat 文件仍然保留在当前目录"
    echo "  - 如需完全移除，请手动删除整个目录"
    echo "  - 建议重新加载 shell 环境：source ~/.bashrc"
    echo
}

# 显示帮助信息
show_help() {
    echo "SaltGoat 一体化管理脚本"
    echo "========================"
    echo ""
    echo "用法: $0 <command> [options]"
    echo ""
    echo "核心命令:"
    echo "  install all                    - 安装所有组件（自动检测并安装依赖）"
    echo "  install core                   - 安装核心组件"
    echo "  install optional               - 安装可选组件"
    echo "  optimize magento               - 优化 Magento 配置"
    echo "  status                         - 检查服务状态"
    echo "  versions                       - 查看所有组件版本信息"
    echo "  passwords                      - 查看配置的密码"
    echo ""
    echo "系统管理:"
    echo "  system install                 - 安装 SaltGoat 到系统路径（无需 ./ 和 sudo）"
    echo "  system uninstall               - 卸载 SaltGoat 系统安装"
    echo ""
    echo "多站点管理:"
    echo "  mysql create <site> <password>  - 创建 MySQL 数据库和用户"
    echo "  mysql list                    - 列出所有数据库"
    echo "  mysql backup <site>           - 备份数据库"
    echo "  mysql delete <site>           - 删除数据库"
    echo "  nginx create <site> <domain>  - 创建 Nginx 站点配置"
    echo "  nginx list                    - 列出所有站点"
    echo "  nginx add-ssl <site> <domain> - 添加 SSL 证书"
    echo "  nginx delete <site>           - 删除站点"
    echo "  rabbitmq create <site> <pass> - 创建 RabbitMQ 用户"
    echo "  rabbitmq list                 - 列出所有用户"
    echo "  rabbitmq delete <site>        - 删除用户"
    echo ""
    echo "定时任务管理:"
    echo "  schedule enable               - 启用 SaltGoat 定时任务"
    echo "  schedule disable              - 禁用 SaltGoat 定时任务"
    echo "  schedule status               - 查看定时任务状态"
    echo "  schedule list                 - 列出所有定时任务"
    echo "  schedule test                 - 测试定时任务配置"
    echo ""
    echo "选项:"
    echo "  --mysql-password <password>    - MySQL root 密码"
    echo "  --valkey-password <password>   - Valkey 密码"
    echo "  --rabbitmq-password <password> - RabbitMQ 管理员密码"
    echo "  --webmin-password <password>   - Webmin 密码"
    echo "  --phpmyadmin-password <password> - phpMyAdmin 密码"
    echo ""
    echo "示例:"
    echo "  $0 install all --mysql-password 'MyPass123!'"
    echo "  $0 mysql create mysite mypassword"
    echo "  $0 schedule enable"
    echo "  $0 status"
    echo ""
}

# 主函数
main() {
    echo "=========================================="
    echo "    SaltGoat 简化安装脚本"
    echo "=========================================="
    
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    check_root
    
    # 解析密码参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mysql-password)
                MYSQL_PASSWORD="$2"
                shift 2
                ;;
            --valkey-password)
                VALKEY_PASSWORD="$2"
                shift 2
                ;;
            --rabbitmq-password)
                RABBITMQ_PASSWORD="$2"
                shift 2
                ;;
            --webmin-password)
                WEBMIN_PASSWORD="$2"
                shift 2
                ;;
            --phpmyadmin-password)
                PHPMYADMIN_PASSWORD="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    # 设置密码
    if [[ -n "$MYSQL_PASSWORD" ]]; then
        set_pillar "mysql_root_password" "$MYSQL_PASSWORD"
    fi
    if [[ -n "$VALKEY_PASSWORD" ]]; then
        set_pillar "valkey_password" "$VALKEY_PASSWORD"
    fi
    if [[ -n "$RABBITMQ_PASSWORD" ]]; then
        set_pillar "rabbitmq_admin_password" "$RABBITMQ_PASSWORD"
    fi
    if [[ -n "$WEBMIN_PASSWORD" ]]; then
        set_pillar "webmin_password" "$WEBMIN_PASSWORD"
    fi
    if [[ -n "$PHPMYADMIN_PASSWORD" ]]; then
        set_pillar "phpmyadmin_password" "$PHPMYADMIN_PASSWORD"
    fi
    
    # 解析命令
    case "$1" in
        "install")
            case "$2" in
                "all")
                    log_highlight "开始安装所有 SaltGoat 组件..."
                    install_all
                    ;;
                "core")
                    log_highlight "开始安装核心组件..."
                    install_core
                    ;;
                "optional")
                    log_highlight "开始安装可选组件..."
                    install_optional
                    ;;
                *)
                    log_error "未知的安装选项: $2"
                    log_info "支持: all, core, optional"
                    exit 1
                    ;;
            esac
            ;;
        "optimize")
            case "$2" in
                "magento")
                    log_highlight "开始优化 Magento 配置..."
                    optimize_magento
                    ;;
                *)
                    log_error "未知的优化选项: $2"
                    log_info "支持: magento"
                    exit 1
                    ;;
            esac
            ;;
        "status")
            log_highlight "检查服务状态..."
            show_status
            ;;
        "versions")
            log_highlight "查看组件版本信息..."
            show_versions
            ;;
        "passwords")
            log_highlight "查看配置的密码..."
            show_passwords
            ;;
        "mysql")
            case "$2" in
                "create")
                    if [[ -z "$3" || -z "$4" ]]; then
                        log_error "用法: $0 mysql create <site> <password>"
                        exit 1
                    fi
                    log_highlight "创建 MySQL 数据库和用户: $3"
                    mysql_create_site "$3" "$4"
                    ;;
                "list")
                    log_highlight "列出所有 MySQL 数据库..."
                    mysql_list_sites
                    ;;
                "backup")
                    if [[ -z "$3" ]]; then
                        log_error "用法: $0 mysql backup <site>"
                        exit 1
                    fi
                    log_highlight "备份数据库: $3"
                    mysql_backup_site "$3"
                    ;;
                "delete")
                    if [[ -z "$3" ]]; then
                        log_error "用法: $0 mysql delete <site>"
                        exit 1
                    fi
                    log_highlight "删除数据库: $3"
                    mysql_delete_site "$3"
                    ;;
                *)
                    log_error "未知的 MySQL 操作: $2"
                    log_info "支持: create, list, backup, delete"
                    exit 1
                    ;;
            esac
            ;;
        "nginx")
            case "$2" in
                "create")
                    if [[ -z "$3" || -z "$4" ]]; then
                        log_error "用法: $0 nginx create <site> <domain>"
                        exit 1
                    fi
                    log_highlight "创建 Nginx 站点配置: $3"
                    nginx_create_site "$3" "$4"
                    ;;
                "list")
                    log_highlight "列出所有 Nginx 站点..."
                    nginx_list_sites
                    ;;
                "add-ssl")
                    if [[ -z "$3" || -z "$4" ]]; then
                        log_error "用法: $0 nginx add-ssl <site> <domain>"
                        exit 1
                    fi
                    log_highlight "为站点添加 SSL: $3"
                    nginx_add_ssl "$3" "$4"
                    ;;
                "delete")
                    if [[ -z "$3" ]]; then
                        log_error "用法: $0 nginx delete <site>"
                        exit 1
                    fi
                    log_highlight "删除站点: $3"
                    nginx_delete_site "$3"
                    ;;
                *)
                    log_error "未知的 Nginx 操作: $2"
                    log_info "支持: create, list, add-ssl, delete"
                    exit 1
                    ;;
            esac
            ;;
        "rabbitmq")
            case "$2" in
                "create")
                    if [[ -z "$3" || -z "$4" ]]; then
                        log_error "用法: $0 rabbitmq create <site> <password>"
                        exit 1
                    fi
                    log_highlight "创建 RabbitMQ 用户: $3"
                    rabbitmq_create_user "$3" "$4"
                    ;;
                "list")
                    log_highlight "列出所有 RabbitMQ 用户..."
                    rabbitmq_list_users
                    ;;
                "delete")
                    if [[ -z "$3" ]]; then
                        log_error "用法: $0 rabbitmq delete <site>"
                        exit 1
                    fi
                    log_highlight "删除用户: $3"
                    rabbitmq_delete_user "$3"
                    ;;
                *)
                    log_error "未知的 RabbitMQ 操作: $2"
                    log_info "支持: create, list, delete"
                    exit 1
                    ;;
            esac
            ;;
        "schedule")
            case "$2" in
                "enable")
                    log_highlight "启用 SaltGoat 定时任务..."
                    schedule_enable
                    ;;
                "disable")
                    log_highlight "禁用 SaltGoat 定时任务..."
                    schedule_disable
                    ;;
                "status")
                    log_highlight "查看定时任务状态..."
                    schedule_status
                    ;;
                "list")
                    log_highlight "列出所有定时任务..."
                    schedule_list
                    ;;
                "test")
                    log_highlight "测试定时任务配置..."
                    schedule_test
                    ;;
                *)
                    log_error "未知的 Schedule 操作: $2"
                    log_info "支持: enable, disable, status, list, test"
                    exit 1
                    ;;
            esac
            ;;
        "system")
            case "$2" in
                "install")
                    log_highlight "安装 SaltGoat 到系统路径..."
                    system_install
                    ;;
                "uninstall")
                    log_highlight "卸载 SaltGoat 系统安装..."
                    system_uninstall
                    ;;
                *)
                    log_error "未知的 System 操作: $2"
                    log_info "支持: install, uninstall"
                    exit 1
                    ;;
            esac
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            log_error "未知命令: $1"
            show_help
            exit 1
            ;;
    esac
}

# 运行主函数
main "$@"
